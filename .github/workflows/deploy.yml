name: Deploy Application

on:
  push:
    branches:
      - prod

env:
  APP_ENV: deployment

jobs:
  create-deployment-artifacts:
    name: Create deployment artifacts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure PHP 8.3
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: ctype, curl, DOM, fileinfo, filter, hash, json, mbstring, openssl, PCRE, PDO, session, tokenizer, xml
      - name: Install Composer dependencies
        run: composer install --optimize-autoloader --no-dev --no-progress --no-interaction --prefer-dist

      - name: Generate frontend routes file
        env:
          APP_URL: https://${{ vars.DOMAIN }}
        run: |
          php artisan ziggy:generate

      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - uses: pnpm/action-setup@v4
        with:
          run_install: true

      - name: Compile CSS and Javascript
        run: |
          pnpm build

      - name: Create deployment artifact
        run: |
          mkdir -p /tmp/artifact
          tar -czf /tmp/artifact/${{ github.sha }}.tar.gz --exclude=*.git --exclude=tests --exclude=storage --exclude=bin --exclude=docker .

      - name: Store artifact for distribution
        uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: /tmp/artifact/${{ github.sha }}.tar.gz

  prepare-release-on-server:
    name: Prepare release
    runs-on: ubuntu-latest
    needs: create-deployment-artifacts
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: app-build

      - name: Upload
        uses: burnett01/rsync-deployments@6.0.0
        with:
          remote_host: ${{ vars.HOST_IP }}
          remote_user: ${{ secrets.HOST_USER }}
          remote_key: ${{ secrets.HOST_KEY }}
          remote_path: ${{ vars.DATA_DIR}}/artifacts
          switches: "--ipv4"
          path: ${{github.sha}}.tar.gz

      - name: Extract archive and manage storage
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
        with:
          host: ${{ vars.HOST_IP }}
          username: ${{ secrets.HOST_USER }}
          key: ${{ secrets.HOST_KEY }}
          envs: GITHUB_SHA
          script: |
            set -e
            mkdir -p ${{ vars.DATA_DIR }}/releases/${GITHUB_SHA}
            tar -xzf ${{ vars.DATA_DIR }}/artifacts/${GITHUB_SHA}.tar.gz -C ${{ vars.DATA_DIR}}/releases/${GITHUB_SHA}
            rm -rf ${{ vars.DATA_DIR }}/releases/${GITHUB_SHA}/storage

  run-before-hooks:
    name: Before hook
    runs-on: ubuntu-latest
    needs: [ create-deployment-artifacts, prepare-release-on-server ]
    steps:
      - name: Run before hooks
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
        with:
          host: ${{ vars.HOST_IP }}
          username: ${{ secrets.HOST_USER }}
          key: ${{ secrets.HOST_KEY }}
          envs: GITHUB_SHA
          script: |
            set -e
            cd ${{ vars.DATA_DIR }}/releases/${GITHUB_SHA}
            php artisan env:decrypt --env=prod --key="$(cat /run/secrets/ENV_KEY)"
            mv .env.prod .env
            php artisan migrate --force

  activate-release:
    name: Activate release
    runs-on: ubuntu-latest
    needs: [ create-deployment-artifacts, prepare-release-on-server, run-before-hooks ]
    steps:
      - name: Activate release
        uses: appleboy/ssh-action@master
        env:
          RELEASE_PATH: ${{ vars.DATA_DIR }}/releases/${{ github.sha }}
          ACTIVE_RELEASE_PATH: ${{ vars.DATA_DIR }}/current
          STORAGE_PATH: ${{ vars.DATA_DIR }}/storage
          BASE_PATH: ${{ vars.DATA_DIR }}
          APP: ${{ vars.PHPFPM_USER }}
        with:
          host: ${{ vars.HOST_IP }}
          username: ${{ secrets.HOST_USER }}
          key: ${{ secrets.HOST_KEY }}
          envs: APP,RELEASE_PATH,ACTIVE_RELEASE_PATH,STORAGE_PATH,BASE_PATH,ENV_PATH
          script: |
            ln -snf $STORAGE_PATH $RELEASE_PATH/storage
            echo "${{ secrets.HOST_PASS }}" | sudo -S chmod -R 755 -R $RELEASE_PATH/*
            echo "${{ secrets.HOST_PASS }}" | sudo -S chmod -R 775 -R $STORAGE_PATH
            echo "${{ secrets.HOST_PASS }}" | sudo -S chown -R $APP:$APP $ACTIVE_RELEASE_PATH
            ln -snf $RELEASE_PATH $ACTIVE_RELEASE_PATH
            echo "${{ secrets.HOST_PASS }}" | sudo -S systemctl reload phpfpm-abidan.service

  run-after-hooks:
    name: After hook
    runs-on: ubuntu-latest
    needs: [ create-deployment-artifacts, prepare-release-on-server, run-before-hooks, activate-release ]
    steps:
      - name: Run after hooks
        uses: appleboy/ssh-action@master
        env:
          ACTIVE_RELEASE_PATH: ${{ vars.DATA_DIR }}/current
        with:
          host: ${{ vars.HOST_IP }}
          username: ${{ secrets.HOST_USER }}
          key: ${{ secrets.HOST_KEY }}
          envs: ACTIVE_RELEASE_PATH
          script: |
            cd $ACTIVE_RELEASE_PATH
            php artisan scout:sync-index-settings
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
            #php artisan inertia:stop-ssr

  clean-up:
    name: Clean up
    runs-on: ubuntu-latest
    needs: [ create-deployment-artifacts, prepare-release-on-server, run-before-hooks, activate-release, run-after-hooks ]
    steps:
      - name: Removing old releases and artifacts
        uses: appleboy/ssh-action@master
        env:
          RELEASES_PATH: ${{ vars.DATA_DIR }}/releases
          ARTIFACTS_PATH: ${{ vars.DATA_DIR }}/artifacts
        with:
          host: ${{ vars.HOST_IP }}
          username: ${{ secrets.HOST_USER }}
          key: ${{ secrets.HOST_KEY }}
          envs: RELEASES_PATH,ARTIFACTS_PATH
          script: |
            cd $RELEASE_PATH && ls -t -1 | tail -n +5 | xargs rm -rf
            echo "${{ secrets.HOST_PASS }}" | sudo -S sh -c 'cd $ARTIFACTS_PATH && ls -t -1 | tail -n +5 | xargs rm -rf'
