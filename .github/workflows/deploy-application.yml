name: Deploy Application

on:
  push:
    branches:
      - prod

jobs:
  create-deployment-artifacts:
    name: Create deployment artifacts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Configure PHP 8.1
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: ctype, curl, DOM, fileinfo, filter, hash, json, mbstring, openssl, PCRE, PDO, session, tokenizer, xml

      - name: Install Composer dependencies
        run: composer install --no-dev --no-interaction --prefer-dist --optimize-autoloader

      - name: Compile CSS and Javascript
        run: |
          npm ci
          npm run build

      - name: Create deployment artifact
        env:
          GITHUB_SHA: ${{ github.sha }}
        run: tar -czf "${GITHUB_SHA}".tar.gz --exclude=*.git --exclude=tests --exclude=storage *

      - name: Store artifact for distribution
        uses: actions/upload-artifact@v3
        with:
          name: app-build
          path: ${{ github.sha }}.tar.gz

  prepare-release-on-server:
    name: Prepare release
    runs-on: ubuntu-latest  
    needs: create-deployment-artifacts
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: app-build

      - name: Upload
        uses: appleboy/scp-action@master
        with:
          host: ${{ vars.HOST_IP }}
          username: ${{ secrets.HOST_USER }}
          key: ${{ secrets.HOST_KEY }}
          source: ${{ github.sha }}.tar.gz
          target: ${{ vars.HOST_PATH }}/artifacts

      - name: Extract archive and create directories
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
        with:
          host: ${{ vars.HOST_IP }}
          username: ${{ secrets.HOST_USER }}
          key: ${{ secrets.HOST_KEY }}
          envs: GITHUB_SHA
          script: |
            mkdir -p "${{ vars.HOST_PATH }}/releases/${GITHUB_SHA}"
            tar -xzf ${{ vars.HOST_PATH }}/artifacts/${GITHUB_SHA}.tar.gz -C "${{ vars.HOST_PATH}}/releases/${GITHUB_SHA}"
            rm -rf ${{ vars.HOST_PATH }}/releases/${GITHUB_SHA}/storage
            mkdir -p ${{ vars.HOST_PATH }}/storage/{app,public,framework,logs}
            mkdir -p ${{ vars.HOST_PATH }}/storage/framework/{cache,sessions,testing,views}
            sudo chmod -R 0777 ${{ vars.HOST_PATH }}/storage

  run-before-hooks:
    name: Before hook
    runs-on: ubuntu-latest
    needs: [ create-deployment-artifacts, prepare-release-on-server ]
    steps:
      - name: Run before hooks
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
          BASE_PATH: ${{ vars.HOST_PATH }}
          RELEASE_PATH: ${{ vars.HOST_PATH }}/releases/${{ github.sha }}
          ACTIVE_RELEASE_PATH: ${{ vars.HOST_PATH }}/current
          STORAGE_PATH: ${{ vars.HOST_PATH }}/storage
        with:
          host: ${{ vars.HOST_IP }}
          username: ${{ secrets.HOST_USER }}
          key: ${{ secrets.HOST_KEY }}
          envs: GITHUB_SHA, BASE_PATH, RELEASE_PATH, ACTIVE_RELEASE_PATH, STORAGE_PATH
          script: |
            cd $ACTIVE_RELEASE_PATH
            ${{ vars.beforeHooks }}

  activate-release:
    name: Activate release
    runs-on: ubuntu-latest
    needs: [ create-deployment-artifacts, prepare-release-on-server, run-before-hooks ]
    steps:
      - name: Activate release
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
          RELEASE_PATH: ${{ vars.HOST_PATH }}/releases/${{ github.sha }}
          ACTIVE_RELEASE_PATH: ${{ vars.HOST_PATH }}/current
          STORAGE_PATH: ${{ vars.HOST_PATH }}/storage
          BASE_PATH: ${{ vars.HOST_PATH }}
          LARAVEL_ENV: ${{ secrets.LARAVEL_ENV }}
        with:
          host: ${{ vars.HOST_IP }}
          username: ${{ secrets.HOST_USER }}
          key: ${{ secrets.HOST_KEY }}
          envs: GITHUB_SHA,RELEASE_PATH,ACTIVE_RELEASE_PATH,STORAGE_PATH,BASE_PATH,ENV_PATH,LARAVEL_ENV
          script: |
            printf "%s" "$LARAVEL_ENV" > "${BASE_PATH}/.env"
            ln -s -f ${BASE_PATH}/.env $RELEASE_PATH
            ln -s -f $STORAGE_PATH $RELEASE_PATH
            ln -s -n -f $RELEASE_PATH $ACTIVE_RELEASE_PATH
            sudo systemctl reload php8.1-fpm

  run-after-hooks:
    name: After hook
    runs-on: ubuntu-latest
    needs: [ create-deployment-artifacts, prepare-release-on-server, run-before-hooks, activate-release ]
    steps:
      - name: Run after hooks
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
          RELEASE_PATH: ${{ vars.HOST_PATH }}/releases/${{ github.sha }}
          ACTIVE_RELEASE_PATH: ${{ vars.HOST_PATH }}/current
          STORAGE_PATH: ${{ vars.HOST_PATH }}/storage
          BASE_PATH: ${{ vars.HOST_PATH }}
        with:
          host: ${{ vars.HOST_IP }}
          username: ${{ secrets.HOST_USER }}
          key: ${{ secrets.HOST_KEY }}
          envs: GITHUB_SHA,RELEASE_PATH,ACTIVE_RELEASE_PATH,STORAGE_PATH,BASE_PATH,ENV_PATH
          script: |
            cd $ACTIVE_RELEASE_PATH
            ${{ vars.afterHooks }}

  clean-up:
    name: Clean up
    runs-on: ubuntu-latest
    needs: [ create-deployment-artifacts, prepare-release-on-server, run-before-hooks, activate-release, run-after-hooks ]
    steps:
      - name: Removing old releases and artifacts
        uses: appleboy/ssh-action@master
        env:
          RELEASES_PATH: ${{ vars.HOST_PATH }}/releases
          ARTIFACTS_PATH: ${{ vars.HOST_PATH }}/artifacts
        with:
          host: ${{ vars.HOST_IP }}
          username: ${{ secrets.HOST_USER }}
          key: ${{ secrets.HOST_KEY }}
          envs: RELEASES_PATH,ARTIFACTS_PATH
          script: |
            cd $RELEASE_PATH && ls -t -1 | tail -n +5 | xargs rm -rf
            cd $ARTIFACTS_PATH && ls -t -1 | tail -n +5 | xargs rm -rf
